@page "/PivotView/AdvanceFiltering"

@using Syncfusion.EJ2.RazorComponents.PivotView

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Label and Value Filtering";
    SampleBrowser.CurrentControlName = "PivotTable";
    SampleBrowser.CurrentControlCategory = "PivotTable";
    SampleBrowser.CurrentControl = SampleBrowser.Config.PivotTable;
    SampleBrowser.ActionDescription = new string[] {
@"<p>
    This sample demonstrates the label and value filtering feature of the pivotgrid widget.
</p>"
};
    SampleBrowser.Description = new string[] {
@"<p>
    The value filtering option allows user to filter the fields based on the grand total. And label filtering option allows user to filter the fields based on the text.
The label and value filtring can be applied either through code-behind or UI by enabling the properties <code>dataSource->allowLabelFilter</code> and <code>dataSource->allowValueFilter</code> to true. 
To achieve this in code-behind, use the <code>filterSettings</code> object in the pivot grid widget along with the following properties.
</p>
<table>
        <tr>
            <td style='vertical-align: top;padding: 10px 0;width:100px'>
                <code>name :</code>
            </td>
            <td>Specifies the normal field.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>type :</code>
            </td>
            <td>Specifies the filter type. For label filtering, it should be 'Label' type and for value filtering, it should be 'Value' type.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>measure :</code>
            </td>
            <td>Specifies the value based field.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>condition :</code>
            </td>
            <td>Specifies the operator type like equals, greater than, less than, etc.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>value1 :</code>
            </td>
            <td>Gets the value to view the filter result.</td>
        </tr>
        <tr>
            <td style='vertical-align: top;padding: 4px 0;'>
                <code>value2 :</code>
            </td>
            <td>For conditions like 'between' and 'not between', this option will be enabled. Enter both start and end value to view the filter result.</td>
        </tr>
    </table>"
};
}
@*End:Hidden*@

<div class="control-section">
    <div class="content-wrapper">
        <EjsPivotView ID="pivotview" Width="100%" Height="400" DataSource="@PivotDataSource" ShowFieldList=true ShowGroupingBar=true>
            <PivotViewGridSettings ColumnWidth="140"></PivotViewGridSettings>
        </EjsPivotView>
    </div>
</div>

<style>
    #pivotview {
        width: 100%;
        height: 100%;
    }
</style>

@functions{

    EjsPivotView pivotView;

    static PivotViewData pivotData = new PivotViewData();

    static List<object> pivotRows { get; set; } = new List<object>
    {
       new { name = "Country" },
       new { name = "Products" }
    };

    static List<object> pivotColumns { get; set; } = new List<object>
    {
       new { name = "Year" },
       new { name = "Order_Source", caption = "Order Source" }
    };

    static List<object> pivotValues { get; set; } = new List<object>
    {
       new { name = "In_Stock", caption = "In Stock" },
       new { name = "Sold", caption = "Units Sold" },
       new { name = "Amount", caption = "Sold Amount" }
    };

    static List<object> pivotFilters { get; set; } = new List<object>
    {
       new { name = "Product_Categories", caption = "Product Categories" }
    };

    static List<object> pivotFilterSettings { get; set; } = new List<object>
    {
       new { name = "Year", type = "Label", condition = "DoesNotEquals", value1= "FY 2017",  }
    };

    static List<object> pivotFormatSettings { get; set; } = new List<object>
    {
       new { name = "Amount", format = "C0" }
    };

    static List<string> drilledItems = new List<string> { "France" };

    static List<object> pivotDrillMembers { get; set; } = new List<object>
    {
       new { name = "Country", items = drilledItems }
    };
    [Parameter]
    private object PivotDataSource { get; set; } = new
    {
        data = pivotData.GetPivot_Data(),
        expandAll = false,
        enableSorting = true,
        allowLabelFilter = true,
        allowValueFilter = true,
        rows = pivotRows,
        columns = pivotColumns,
        values = pivotValues,
        filters = pivotFilters,
        filterSettings = pivotFilterSettings,
        formatSettings = pivotFormatSettings,
        drilledMembers = pivotDrillMembers
    };
}
